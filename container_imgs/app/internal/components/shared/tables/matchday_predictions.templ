package tables

import (
	"fmt"
    "strconv"
    "time"
    "github.com/jackc/pgx/v5/pgtype"

    "app/internal/db"
)

templ MatchdayPredictions(matches []db.Match, predictions []db.UserPredictions) {
    <div class="overflow-x-auto w-full" x-data="{ showPercentages: false }">
        <div class="inline-block min-w-full rounded-lg overflow-hidden shadow-lg">
            <style>
                @keyframes blink {
                    0% { background-color: #1F2937; }
                    50% { background-color: #e9d6ff; }
                    100% { background-color: #1F2937; }
                }
                .blink {
                    animation: blink 7s linear infinite;
                }
                .elige8-indicator {
                    position: relative;
                }
                .elige8-indicator::after {
                    content: '';
                    position: absolute;
                    top: 0;
                    right: 0;
                    width: 0;
                    height: 0;
                    border-style: solid;
                    border-width: 0 8px 8px 0;
                    border-color: transparent #3B82F6 transparent transparent;
                }
            </style>
            <table class="min-w-full bg-gray-800 text-sm border-collapse">
                <thead class="bg-gray-800">
                    <tr>
                        <th class="sticky left-0 z-10 bg-gray-800 py-3 px-4 border-b-2 border-r-2 border-gray-600 rounded-tl-lg">Partidos</th>
                        for _, pred := range predictions {
                            <th class="py-3 px-1 border-b-2 border-gray-600 text-center rounded-tr-lg" colspan="2">
                                {pred.UserName}
                            </th>
                        }
                    </tr>
                    <tr>
                        <th class="border-b border-r border-gray-600">
                            <button
                                @click="showPercentages = !showPercentages"
                                class="my-1 px-4 py-2 bg-blue-500 text-white rounded hover:bg-blue-600"
                                x-text="showPercentages ? 'Esconder %' : 'Ver %'"
                            ></button>
                        </th>
                        for _, pred := range predictions {
                            <th class={
                                "py-2 px-1 border-b-2 border-r-2 border-gray-600 text-center font-bold",
                                highlightSumColor(pred, 0, 1)
                            }>
                                {strconv.Itoa(sumCorrect(pred.IsCorrect, 0))}
                            </th>
                            <th class={
                                "py-2 px-1 border-b-2 border-r-2 border-gray-600 text-center font-bold",
                                highlightSumColor(pred, 1, 0),
                            }>
                                {strconv.Itoa(sumCorrect(pred.IsCorrect, 1))}
                            </th>
                        }
                    </tr>
                </thead>
                <tbody>
                    for i, match := range matches {
                        <tr class={templ.KV("bg-gray-750", i%2 == 0), templ.KV("bg-gray-800", i%2 != 0), "hover:bg-gray-800"}>
                            <td class={
                                "sticky left-0 z-10 py-2 px-2 border-b border-r border-gray-600",
                                templ.KV("blink", shouldBlinkMatch(match.KickoffDatetime, predictions, i))
                            }>
                            <div class="flex justify-center">
                                <div class="flex items-center">
                                    <img src={ match.HomeLogo } alt={ match.HomeCode } class="h-6 w-6 object-contain"/>
                                    <span class="text-sm  mr-1">{ match.HomeCode }</span>
                                </div>
                                <div class="flex items-center">
                                    <span class="text-sm  ml-1">{ match.AwayCode }</span>
                                    <img src={ match.AwayLogo } alt={ match.AwayCode } class="h-6 w-6 object-contain"/>
                                </div>
                            </div>
                                if i != 14 {
                                    <div x-show="showPercentages" class="py-0">
                                        <div class={
                                            "inline-flex items-center rounded-full px-1 py-1 mr-1 text-xs font-medium text-white",
                                            percentPredColor(match.HomePercent.Int32, match.DrawPercent.Int32, match.AwayPercent.Int32),
                                        }>
                                            <span class="mr-1">1:</span>
                                            <span class="font-bold">{ fmt.Sprintf("%d%%", match.HomePercent.Int32) }</span>
                                        </div>
                                        <div class={
                                            "inline-flex items-center rounded-full px-1 py-1 mr-1 my-1 text-xs font-medium text-white",
                                            percentPredColor(match.DrawPercent.Int32, match.HomePercent.Int32, match.AwayPercent.Int32),
                                        }>
                                            <span class="mr-1">X:</span>
                                            <span class="font-bold">{ fmt.Sprintf("%d%%", match.DrawPercent.Int32) }</span>
                                        </div>
                                        <div class={
                                            "inline-flex items-center rounded-full px-1 py-1 my-1 text-xs font-medium text-white",
                                            percentPredColor(match.AwayPercent.Int32, match.DrawPercent.Int32, match.HomePercent.Int32),
                                        }>
                                            <span class="mr-1">2:</span>
                                            <span class="font-bold">{ fmt.Sprintf("%d%%", match.AwayPercent.Int32) }</span>
                                        </div>
                                    </div>
                                }
                            </td>
                            for _, pred := range predictions {
                                if i == len(matches) - 1 {
                                    // Last row for each user
                                    <td class={
                                        "py-2 px-2 border-b border-r border-gray-600 text-center",
                                        isCorrectColor(pred.IsCorrect[i][0])
                                    } colspan="2">
                                        {pred.Predictions[i][0]}
                                    </td>
                                } else {
                                // Regular columns
                                <td class={
                                    "py-2 px-2 border-b text-center border-gray-600",
                                    isCorrectColor(pred.IsCorrect[i][0]),
                                    elige8Mark(pred.IsElige8[i][0])
                                }>
                                    {pred.Predictions[i][0]}
                                </td>
                                <td class={
                                    "py-2 px-2 border-b border-r text-center border-gray-600",
                                    isCorrectColor(pred.IsCorrect[i][1]),
                                    elige8Mark(pred.IsElige8[i][1])
                                }>
                                    {pred.Predictions[i][1]}
                                </td>
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

func elige8Mark(isElige8 pgtype.Bool) string {
    if (isElige8.Valid && isElige8.Bool) {
        return "elige8-indicator"
    }
    return ""
}

func percentPredColor(currPred, pred2, pred3 int32) string {
    if currPred > pred2 && currPred > pred3 {
        return "bg-green-700"
    }

    if currPred > pred2 || currPred > pred3 {
        return "bg-orange-700"
    }

    return "bg-red-700"
}

func isCorrectColor(isCorrect pgtype.Bool) string {
    if isCorrect.Valid && isCorrect.Bool{
        return "bg-green-800"
    }

    if isCorrect.Valid && !isCorrect.Bool{
        return "bg-red-800"
    }

    return ""
}

func highlightSumColor(pred db.UserPredictions, indexC1, indexC2 int) string{
    if sumCorrect(pred.IsCorrect, indexC1) > sumCorrect(pred.IsCorrect, indexC2){
        return "bg-amber-500"
    }
    return "bg-amber-700"
}

func sumCorrect(isCorrect [][]pgtype.Bool, colNum int) int {
    total := 0
    for _, colIsCorrect := range isCorrect {
        if colIsCorrect[colNum].Valid && colIsCorrect[colNum].Bool {
            total++
        }
    }
    return total
}


func shouldBlinkMatch(kickoffTime pgtype.Timestamp, predictions []db.UserPredictions, matchIndex int) bool {
    if !kickoffTime.Valid {
        return false
    }

    now := time.Now().UTC().Add(1 * time.Hour)
    if !now.After(kickoffTime.Time) {
        return false
    }

    for _, pred := range predictions {
        if pred.IsCorrect[matchIndex][0].Valid{
            return false
        }
    }

    return true
}
